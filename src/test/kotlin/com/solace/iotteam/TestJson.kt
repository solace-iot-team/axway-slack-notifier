package com.solace.iotteam

import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.solace.iotteam.model.NotificationSubscribe
import io.micronaut.test.extensions.junit5.annotation.MicronautTest
import org.junit.jupiter.api.Test
import java.util.*

@MicronautTest
class TestJson {

    val rawJsonBase64:String = ""

    @Test
    fun testJsonToJsonNode(){
        val rawJson = Base64.getDecoder().decode(rawJsonBase64)
        val rootNode = jacksonObjectMapper().readTree(Base64.getDecoder().decode(rawJsonBase64))
    }

    @Test
    fun testJsonNotificationEvent(){
        val rawJson = Base64.getDecoder().decode(rawJsonBase64)
        val rootNode = jacksonObjectMapper().readValue(Base64.getDecoder().decode(rawJsonBase64),
            NotificationSubscribe::class.java)
        val key = rootNode.data?.applicationData?.at("/credentials/secret/consumerKey")
        val secret = rootNode.data?.applicationData?.at("/credentials/secret/consumerSecret")
        println("Key:$key Secret:$secret")
    }
}